def dockerfileAppDir = "$projectDir/svws/app"

/*
 Task lädt die SVWS-Artefakte einer angegebenen Version
 aus dem Package-Repository von GitHub und speichert diese
 für die Integration in das Docker-Image des SVWSs.
 */
task copyPublishedArtifacts(type: Copy) {
	dependsOn downloadPublishedArtifacts
	def appArtifactsDir = project.ext.appArtifactsDir
	copy {
		from ("${appArtifactsDir}") {
			exclude "svws-*.jar"
			exclude "svws-*.zip"
		}
		into "${dockerfileAppDir}/lib"
	}
	copy {
		from ("${appArtifactsDir}") {
			include "svws-*.jar"
			include "svws-*.zip"
		}
		into "${dockerfileAppDir}"
	}
}

/*
 Task führt ein Docker-Build per docker compose durch.
 */
task dockerComposeBuild(type: Exec) {
	dependsOn copyPublishedArtifacts
	workingDir "$projectDir"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'docker compose build'
	} else {
		commandLine 'sh', '-c', 'docker compose build'
	}
}

/*
 Task startet eine lokale SVWS-Umgebung per docker compose.
 */
task dockerComposeUp(type: Exec) {
	workingDir "$projectDir"
	def cmd = 'docker compose up'
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', cmd
	} else {
		commandLine 'sh', '-c', 'docker compose up'
	}
}

/*
 Task führt einen Image-Build des SVWS durch.
 */
task dockerBuildSvws(type: Exec) {
	dependsOn downloadPublishedArtifacts
	workingDir "$projectDir"
	def cmd = "docker build svws/. -t svws:${svwsArtifactVersion}"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', cmd
	} else {
		commandLine 'sh', '-c', cmd
	}
}

/*
 Task führt einen Image-Build des SVWS durch, setzt ein Tag
 und veröffentlicht das Image im Image-Repository (Nexus)
 */
task dockerBuildTagAndPublish(type: Exec) {
	dependsOn dockerBuildSvws
	workingDir "$projectDir"
	def dockerRegistryUsername = getNexusActor()
	def dockerRegistryToken = getNexusToken()

	def dockerRegistryHost = 'artifactory.svws-nrw.de'
	def dockerRegistry = "${dockerRegistryHost}/repository/svws-docker"
	def tagNamePub = "${dockerRegistry}/svws:${svwsArtifactVersion}"
	def dockerTagCmd = "docker tag svws:${svwsArtifactVersion} ${tagNamePub}"
	def dockerPushCmd = "docker push ${tagNamePub}"

	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		def dockerLoginCmdWin = "docker login --username ${dockerRegistryUsername} --password-stdin ${dockerRegistryHost}<pw.txt"
		commandLine 'cmd', '/c', "@echo ${dockerRegistryToken}>pw.txt&&${dockerLoginCmdWin} && ${dockerTagCmd} && ${dockerPushCmd} && del pw.txt"
	} else {
		def dockerLoginCmdLin = "set -x; echo \"${dockerRegistryToken}\" | docker login --username ${dockerRegistryUsername} --password-stdin ${dockerRegistryHost}"
		commandLine 'sh', '-c', "${dockerLoginCmdLin} && ${dockerTagCmd} && ${dockerPushCmd}"
	}
}

clean.doLast {
	file("${dockerfileAppDir}").deleteDir()
}
